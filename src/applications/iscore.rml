open Types
open Motor
open Time
open Osc
open Gui


(* definition of interaction points *)
let ip_3 = ("/start",[Int32 3])
let ip_4 = ("/stop",[Int32 4])
let ip_3_stop = ("/stop",[Int32 3])


(* definition of signals for relations *)
let f_n= 21 ;;
let f_signal = Array.init (f_n) (fun i -> signal s in s) ;;

(* definition of process *)
let box_1 = Process (1, Fixed (Finite 4, f_signal.(3)),("/box",[Int32 1;String "start"]),("/box",[Int32 1; String "stop"]))
let box_2 = Process (2,Fixed (Finite 5, f_signal.(4)),("/box",[Int32 2;String "start"]),("/box",[Int32 2; String "stop"]))
let box_4 = Process (4, Interactive ((Finite 3, f_signal.(12)),(Finite 3, f_signal.(13)),ip_4),("/box",[Int32 4;String "start"]),("/box",[Int32 4; String "stop"]))
let box_5 = Process (5,Fixed (Finite 1, f_signal.(14)),("/box",[Int32 5;String "start"]),("/box",[Int32 5; String "stop"]))
let box_6 = Process (6,Fixed (Finite 15, f_signal.(19)),("/box",[Int32 6;String "start"]),("/box",[Int32 6; String "stop"]))

(* definition of relations *)
let rel_0_1 = (0, 1, Fixed (Finite 3, f_signal.(1)))
let rel_0_2 = (0, 2, Fixed (Finite 1, f_signal.(2)))
let rel_1_3 = (1, 3, Interactive ((Finite 1, f_signal.(5)),(Finite 4, f_signal.(7)),ip_3))
let rel_2_3 = (2, 3, Interactive ((Finite 3, f_signal.(6)),(Finite 5, f_signal.(7)),ip_3))
let rel_2_6 = (2, 6, Fixed (Finite 0, f_signal.(18)))
let rel_6_0 = (6, 0, Fixed (Finite 0, f_signal.(20)))
(*let rel_1_3 = (1, 3, Fixed (2, signal s in s))
let rel_2_3 = (2, 3, Fixed (3, signal s in s))*)
let rel_3_0 = (3, 0, Fixed (Finite 4, f_signal.(17)))
let rel_3_4 = (3, 4, Fixed (Finite 2, f_signal.(10)))
let rel_3_5 = (3, 5, Fixed (Finite 3, f_signal.(11)))
let rel_4_3 = (4, 3, Fixed (Finite 0, f_signal.(15)))
let rel_5_3 = (5, 3, Fixed (Finite 0, f_signal.(16)))

(* definition of hierarchical boxes *)
let box_3 = Hierarchical (3,[box_4; box_5], [rel_3_4; rel_3_5; rel_4_3; rel_5_3], Interactive ((Finite 2, f_signal.(8)),(Infinite, f_signal.(9)),ip_3_stop))
let box_0 = Hierarchical (0,[box_1; box_2; box_3; box_6], [rel_0_1; rel_0_2; rel_1_3; rel_2_3; rel_3_0; rel_2_6; rel_6_0], Fixed (Finite 0, f_signal.(0)))

(* defintion of the score *)
let scenaro = box_0

let gui_score = [
    {id=5; pos_x=15.0; pos_y=(0.0); height=0.3; dur=1.0; children=[]; color=(51,51,0); ip= (None, None)};
    {id=4; pos_x=14.0; pos_y=(-0.4); height=0.3; dur=6.0; children=[]; color=(0,76,153); ip=(None,Some ip_4)};
    {id=3; pos_x=12.0; pos_y=(-0.2); height=0.9; dur=15.0; children=[4;5]; color=(255,102,102); ip= (Some ip_3, Some ip_3_stop)};
    {id=6; pos_x=6.0; pos_y=0.6; height=0.3; dur=15.0; children=[]; color=(255,102,255); ip=(None, None)};
    {id=2; pos_x=1.0; pos_y=0.2; height=0.3; dur=5.0; children=[]; color=(153,153,255); ip= (None,None)};
    {id=1; pos_x=3.0; pos_y=(-0.2); height=0.3; dur=4.0; children=[]; color=(0,153,76); ip= (None,None)};
    {id=0; pos_x=0.0; pos_y=0.0; height=2.0; dur=31.0; children=[1;2;3;6]; color=(238,238,238); ip= (None,None)}
    ]

let process main =
    signal tic in
    signal output in
    signal input in
    signal motor_observer in
    signal output_inscore in
    signal end_scenario in
    let client_port = 7777 in
    let inscore_port = 7000 in
    let server_port = 8000 in
    let host = "localhost" in
    let period = 1.0 in
    let scenario = box_0 in
    let score_player = make_player tic scenario input output motor_observer in
    let gui = gui_inscore tic gui_score output_inscore motor_observer host server_port in
    do
    run (emit_tic period tic) ||
    run (osc_client host client_port output) ||
    run (osc_server server_port input) ||
    run (osc_client host inscore_port output_inscore) ||
    (await tic ;((run score_player; await immediate tic; emit end_scenario)|| run gui))
    until end_scenario done






